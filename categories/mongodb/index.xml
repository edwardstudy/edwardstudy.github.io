<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MongoDB on Edwardesire</title><link>/categories/mongodb/</link><description>Recent content in MongoDB on Edwardesire</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2021 &lt;a href="https://www.edwardesire.com/">Edward Desire&lt;/a></copyright><lastBuildDate>Sun, 18 Dec 2016 14:54:03 +0000</lastBuildDate><atom:link href="/categories/mongodb/index.xml" rel="self" type="application/rss+xml"/><item><title>实验室简明mongoDB用户体验指南·续——查询</title><link>/post/user-experience-of-mongodb-query/</link><pubDate>Sun, 18 Dec 2016 14:54:03 +0000</pubDate><guid>/post/user-experience-of-mongodb-query/</guid><description>上篇： 2015-12-22 blog: 从MongoDB入门到编写数据库相关API 本指南延续上篇的内容，带领大家使用MongoDB Node.js Driver进行应用开发。 Node.js Driver与Mon</description></item><item><title>mongoDB去重操作性能指标</title><link>/post/mongodb-duplicate-removal-aggregatioin-index/</link><pubDate>Wed, 18 May 2016 08:22:55 +0000</pubDate><guid>/post/mongodb-duplicate-removal-aggregatioin-index/</guid><description>最近刚完成mongoDB的压力测试，单集合内拥有2亿条数据。2亿多的数据量跑一次聚合操作会是怎么样的结果呢？ 我们的测试环境还是老机器配置（5台分片集群</description></item><item><title>在Docker搭建Node.js+mongoDB开发环境</title><link>/post/docker/</link><pubDate>Mon, 25 Apr 2016 08:29:19 +0000</pubDate><guid>/post/docker/</guid><description>这周通过docker将整个技术栈更新一下，首先介绍Docker的基本概念。 Docker是在LXC上构建的容器引擎。我这里主要讲起当作更加灵巧的虚拟机用</description></item><item><title>Paper Reader:Analysis Farm: A Cloud-based Scalable Aggregation and Query Platform for Network Log Analysis</title><link>/post/paper-reader-analysis-farm-a-cloud-based-scalable-aggregation-and-query-platform-for-network-log-analysis/</link><pubDate>Tue, 19 Apr 2016 02:43:53 +0000</pubDate><guid>/post/paper-reader-analysis-farm-a-cloud-based-scalable-aggregation-and-query-platform-for-network-log-analysis/</guid><description>这篇论文的主要内容是实现了要给日志分析的原型系统，其最底层使用OpenStack虚拟，数据存储层使用mongoDB。文中通过几个实验阐述了这一套架构的</description></item><item><title>Paper Reader:Analysis of range-based key properties for sharded cluster of MongoDB</title><link>/post/paper-reader-analysis-of-range-based-key-properties-for-sharded-cluster-of-mongodb/</link><pubDate>Sat, 09 Apr 2016 08:55:19 +0000</pubDate><guid>/post/paper-reader-analysis-of-range-based-key-properties-for-sharded-cluster-of-mongodb/</guid><description>前述很多mongoDB集群的使用和性能优化，发现一些还有可以优化因子值得好好研究。本文首先补充一直没有提到但已经使用了好久的分片集群的知识，然后再贴上</description></item><item><title>越过大山和mongoDB查询操作的坑</title><link>/post/a-mountain-to-climb-mongodb-index-query/</link><pubDate>Mon, 28 Mar 2016 11:41:13 +0000</pubDate><guid>/post/a-mountain-to-climb-mongodb-index-query/</guid><description>本周在2亿数据集上跑mapreduce（以下简称MR）和aggreation framework（AF）计算，但处理的速度非常慢。本文从索引入手寻找解决</description></item><item><title>MongoDB MapReduce实践</title><link>/post/mongodb-mapreduce-example/</link><pubDate>Sat, 19 Mar 2016 08:20:43 +0000</pubDate><guid>/post/mongodb-mapreduce-example/</guid><description>上回说到采用mongoDB自带的Aggregation功能来处理数据，但我们发现当数据量大时（1000w records）执行时间非常长。并且处理数据的</description></item><item><title>MongoDB Aggregation实践</title><link>/post/mongdb-aggregation-example/</link><pubDate>Thu, 03 Mar 2016 12:56:34 +0000</pubDate><guid>/post/mongdb-aggregation-example/</guid><description>内容为依据实验室项目需求来使用MongoDB聚合操作来将处理的数据存到集合中。 数据聚合 mongoDB的数据聚合使用了聚合管道（Aggregation P</description></item><item><title>部署有身份验证的mongoDB</title><link>/post/usage-of-basic-authentication-and-authorization-of-mongodb/</link><pubDate>Wed, 13 Jan 2016 12:35:11 +0000</pubDate><guid>/post/usage-of-basic-authentication-and-authorization-of-mongodb/</guid><description>mongoDB默认情况下是不需要身份认证的，但是处于生产环境安全的考虑，还是不能省去这一步的。本文将在这篇文章所述环境下部署带身份认证的mongoDB</description></item><item><title>从MongoDB入门到编写数据库相关API</title><link>/post/code-to-meanjs/</link><pubDate>Tue, 22 Dec 2015 15:45:55 +0000</pubDate><guid>/post/code-to-meanjs/</guid><description>这篇文章为实验室开会本人讲解mongoDB的讲义，主要讲述两个内容：MongoDB的入门和Nodejs编写相关API入门。内容比较简单，但是实践性比较</description></item><item><title>MongoBD+Solr全文搜索的历程</title><link>/post/full-text-search-of-mongodb-with-solr/</link><pubDate>Mon, 26 Oct 2015 15:04:26 +0000</pubDate><guid>/post/full-text-search-of-mongodb-with-solr/</guid><description>当存储到数据库中的数据涉及到文本，针对文本的搜索需求就应运而生。MongoDB也支持文本的搜索，不过很可惜的是，MongoDB的$text不支持中文分</description></item><item><title>MongoDB更新操作符的实践</title><link>/post/mongodb-update-operators-apply/</link><pubDate>Tue, 20 Oct 2015 14:55:40 +0000</pubDate><guid>/post/mongodb-update-operators-apply/</guid><description>和查询操作符类似，更新操作符处理最复杂的对象也是数组。我们按照上一篇文章的方法，先总结我所用到的操作符，再结合项目中遇到的实例组合使用操作符。 ####1. 字段更</description></item><item><title>MongoDB查询以及投影操作符的实践</title><link>/post/mongodb-query-and-projection-operators-apply/</link><pubDate>Sun, 18 Oct 2015 05:18:44 +0000</pubDate><guid>/post/mongodb-query-and-projection-operators-apply/</guid><description>当使用MongoDB提供复制操作时，需要简单的CURD操作基础上使用一些操作符(如同$eq这样的操作符)，mongoDB官网文档[1]有其详细介绍。需</description></item><item><title>MongoDB/SQL Server增量同步方案</title><link>/post/mongodb-fetch-sql-server-change-data-capture/</link><pubDate>Fri, 16 Oct 2015 14:40:13 +0000</pubDate><guid>/post/mongodb-fetch-sql-server-change-data-capture/</guid><description>由于SQL Server的特殊性，目前市面上没有成熟开源的SQL Server/MongoDB同步软件，可行方案需要采用软件编写的方式才能实现该功能。通过</description></item><item><title>Web应用分页功能的简单实现</title><link>/post/pagination-with-mongoose/</link><pubDate>Tue, 15 Sep 2015 09:25:53 +0000</pubDate><guid>/post/pagination-with-mongoose/</guid><description>Web应用的一个简单分页功能，前端直接使用bootstrap的Pagination指令，后端通过nodejs的mongoose驱动skip()和lim</description></item><item><title>MongoDB图片存储测试</title><link>/post/test-persistent-image-file-in-mongodb/</link><pubDate>Tue, 16 Jun 2015 02:20:10 +0000</pubDate><guid>/post/test-persistent-image-file-in-mongodb/</guid><description>Web应用中对于图片的存储方案一直是存放在CDN或者服务器的文件系统中，通过索引数据库中的文件路径，分步获得资源后再响应客户端的请求。MongoDB这</description></item><item><title>MongoDB理论浅入浅出</title><link>/post/the-mongodb-tempter/</link><pubDate>Tue, 09 Jun 2015 10:30:28 +0000</pubDate><guid>/post/the-mongodb-tempter/</guid><description>最近老板揽到了大数据的大项目，需要写写写写写MongoDB的设计方案，这段时间就恶补了MongoDB数据库的相关知识。本篇文章抛开以前使用MongoD</description></item><item><title>NodeJS:树的序列化</title><link>/post/nodejs-serialize-dtree/</link><pubDate>Sat, 20 Dec 2014 11:47:00 +0000</pubDate><guid>/post/nodejs-serialize-dtree/</guid><description>接着上周的工作，我们把上周反序列得到的dtree对象输出到JSON，再将其序列化后存入MongoDB。 存入文档 先将上次得到的决策树对象整个保存到JSO</description></item><item><title>NodeJS:树的反序列化</title><link>/post/nodejs-deserialize-dtree/</link><pubDate>Mon, 15 Dec 2014 15:15:52 +0000</pubDate><guid>/post/nodejs-deserialize-dtree/</guid><description>树的反序列化就是将序列数组安装线索组成树结构，今次项目数据库存储决策节点的方式是通过数组进行，每个节点有一个parent_id键直指双亲节点的node</description></item><item><title>在Windows下启动mongodb服务</title><link>/post/zai-windowsxia-qi-dong-mongodbfu-wu/</link><pubDate>Sun, 26 Oct 2014 11:21:06 +0000</pubDate><guid>/post/zai-windowsxia-qi-dong-mongodbfu-wu/</guid><description>最近在做项目的访问控制，开始使用mongoDB来存储数据。而我在Windows下一直是手动启动mongoDB的服务(\bin\mongod.exe)，</description></item></channel></rss>